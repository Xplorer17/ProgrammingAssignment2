?solve
makeVector(c(1,2,3,4,5,6))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1,2,3,4,5,6))
cachemean()
x <- makeVector(c(1,2,3,4,5,6))
cachemean(x)
?"matrix"
mdat <- matrix(c(1,2,3,11,12,13), nrow = 2, ncol = 3, byrow = TRUE)
mdat
solve(mdat)
mdat <- matrix(c(1,2,11,12), nrow = 2, ncol = 2, byrow = TRUE)
mdat
solve(mdat)
matrix(NULL)
mx <- mdat
mx
m1x <- solve(mx)
m1x
m1x <- NULL
m1x
makeCacheMatrix <- function(x = matrix()) {
ix <- NULL
set <- function(y) {
x <<- y
ix <<- NULL
}
get <- function() x
setinverse <- function(solve) ix <<- solve
getinverse <- function() ix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
rm(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
ix <- x$getinverse()
if(!is.null(ix)){
message("getting cached data")
return(ix)
}
data <- x$get()
ix <- solve(data)
x$setinverse(ix)
ix
}
makeCacheMatrix(mdat)
md <- makeCacheMatrix(mdat)
cacheSolve(md)
solve(mdat)
mdat <- matrix(c(1,2,3,11,12,13), nrow = 2, ncol = 3, byrow = TRUE)
md <- makeCacheMatrix(mdat)
cacheSolve(md)
